import java.net.Socket;
import java.util.*;

import javax.swing.SwingWorker;

public class Transcription
{
	private static Transcription instance;
	
	public IO io;
	public ArrayList<ClientInfo> clientsInfo;

	
	public static Transcription getInstance()
	{
		if (instance == null)
		{
			instance = new Transcription(); 
		}
		return instance; 
	}
	
	public Socket getClientSocket(int index)
	{
		if (clientsInfo != null && clientsInfo.size() >= index)
		{
			return clientsInfo.get(index).getSocket(); 
		}
		return null; 
	}
	
	public ClientInfo getClientForMatching()
	{
		ClientInfo client = clientsInfo.remove(0);
		return client;
	}
	
	public int getClientsCount()
	{
		return clientsInfo.size();
	}
	
	public void removeDisconnectedClients()
	{
		ArrayList<ClientInfo> disconnectedClients = new ArrayList<ClientInfo>();
		for (int i = 0; i < clientsInfo.size(); i++)
		{
			ClientInfo client = clientsInfo.get(i);
			// if (Socket of ClientInfo is disconnected) (test through reading or writing)
			if (false)
				disconnectedClients.add(client);
		}
		
		clientsInfo.removeAll(disconnectedClients);
	}
	
	public Object read()
	{ return inServer.read(); }
	
	public Byte readByte()
	{ return inServer.readByte(); }
	
	public void write(String message)
	{ outServer.write(message); }
	
	public void sendMove(Space clicked)
	{ send.sendMove(clicked); }
	
	public void translateToClient(Space clicked)
	{ parseToServer.translate(clicked); }
	
	public void translateFromClient(Byte messageType)
	{ parseFromServer.translate(messageType); }
	
	public void connect()
	{
		socket = connect.connectSocket();
		//outServer = new OutServer(socket);
		//inServer = new InServer(socket);
		
		SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>()
		{
			protected Void doInBackground() throws Exception
			{                
				listen();
				return null;
			}
			@Override
			protected void done()
			{
				try
				{ }
				catch (Exception e)
				{ }
			}
		};
		worker.execute();
		
	/*	Byte messageType = inServer.readByte();
		if(messageType == 'C')
		{
			String color = (String) inServer.read();
			GameScreen.getGameScreen().setColor(color);
		}*/
	}
	
	public void listen()
	{ listen.retrieveMessages(); }
	
	public Socket getServerSocket()
	{
		return serverInfo.getSocket(); 
	}
}
